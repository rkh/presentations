rbx compile -B -N ultimate_answer? example.rb 

========== :ultimate_answer? ===========
Arguments:   1 required, 0 post, 1 total
Arity:       1
Locals:      1: value
Stack size:  3
Lines to IP: 2: -1..-1, 3: 0..10

0000:  push_local                 0    # value
0002:  send_stack                 :to_s, 0
0005:  push_literal               "42"
0007:  string_dup                 
0008:  meta_send_op_equal         :==
0010:  ret                        
----------------------------------------

gdb --args rbx -r example
GNU gdb 6.3.50-20050815 (Apple version gdb-1518) (Sat Feb 12 02:52:12 UTC 2011)
Copyright 2004 Free Software Foundation, Inc.
GDB is free software, covered by the GNU General Public License, and you are
welcome to change it and/or distribute copies of it under certain conditions.
Type "show copying" to see the conditions.
There is absolutely no warranty for GDB.  Type "show warranty" for details.
This GDB was configured as "x86_64-apple-darwin"...Reading symbols for shared libraries ... done

(gdb) br 'rub
Display all 3026 possibilities? (y or n)
(gdb) br 'rubinius::O             
Display all 167 possibilities? (y or n)
(gdb) br 'rubinius::Object
Display all 163 possibilities? (y or n)
(gdb) br 'rubinius::Object::show
rubinius::Object::show(rubinius::VM*)              rubinius::Object::show_simple(rubinius::VM*)       
rubinius::Object::show(rubinius::VM*, int)         rubinius::Object::show_simple(rubinius::VM*, int)  
(gdb) br 'rubinius::Object::show(rubinius::VM*)'
Breakpoint 1 at 0x100151a54: file vm/builtin/object.cpp, line 682.
(gdb) run
Starting program: /Users/konstantin/.rvm/rubies/rbx-master/bin/rbx -r example
Reading symbols for shared libraries ++. done
Reading symbols for shared libraries . done
Reading symbols for shared libraries ... done
rbx-master :001 > DeepThought.method_table.lo
DeepThought.method_table.load                DeepThought.method_table.load_compiled_file  DeepThought.method_table.load_compiler       DeepThought.method_table.load_error          
DeepThought.method_table.load_file           DeepThought.method_table.load_library        DeepThought.method_table.load_modules        DeepThought.method_table.load_modules=       
DeepThought.method_table.load_paths          DeepThought.method_table.load_script         DeepThought.method_table.loadable?           DeepThought.method_table.local_count         
DeepThought.method_table.local_count=        DeepThought.method_table.local_defined?      DeepThought.method_table.local_layout        DeepThought.method_table.local_names         
DeepThought.method_table.local_names=        DeepThought.method_table.local_slot          DeepThought.method_table.locals              DeepThought.method_table.locals=             
DeepThought.method_table.localtime           DeepThought.method_table.locate              DeepThought.method_table.locate_line         DeepThought.method_table.location            
DeepThought.method_table.locations           DeepThought.method_table.locations=          DeepThought.method_table.lock                DeepThought.method_table.locked?             
DeepThought.method_table.long                DeepThought.method_table.lookup              DeepThought.method_table.lookup_method       DeepThought.method_table.loop?               
rbx-master :001 > DeepThought.method_table.lookup(:ultimate_answer?).method
 => #<Rubinius::CompiledMethod ultimate_answer? file=/Users/konstantin/Workspace/presentations/example/example.rb> 
rbx-master :002 > method = _
 => #<Rubinius::CompiledMethod ultimate_answer? file=/Users/konstantin/Workspace/presentations/example/example.rb> 
rbx-master :003 > _.__show__

Breakpoint 1, rubinius::Object::show (this=0x102480558, state=0x100f06330) at vm/builtin/object.cpp:682
682	    return show(state, 0);
(gdb) p *this
$1 = {
  <rubinius::ObjectHeader> = {
    header = {
      f = {
        meaning = 0, 
        obj_type = rubinius::CompiledMethodType, 
        zone = rubinius::MatureObjectZone, 
        age = 0, 
        Forwarded = 0, 
        Remember = 0, 
        Marked = 2, 
        InImmix = 1, 
        Pinned = 0, 
        Frozen = 0, 
        Tainted = 0, 
        Untrusted = 0, 
        LockContended = 0, 
        unused = 0, 
        aux_word = 0
      }, 
      flags64 = 1574992, 
      all_flags = 0x180850
    }, 
    klass_ = 0x100f2d480, 
    ivars_ = 0x1a, 
    __body__ = 0x102480570
  }, 
  members of rubinius::Object: 
  static type = rubinius::ObjectType
}
(gdb) p (CompiledMethod)*this
$2 = {
  <rubinius::Executable> = {
    <rubinius::Object> = {
      <rubinius::ObjectHeader> = {
        header = {
          f = {
            meaning = 0, 
            obj_type = rubinius::CompiledMethodType, 
            zone = rubinius::MatureObjectZone, 
            age = 0, 
            Forwarded = 0, 
            Remember = 0, 
            Marked = 2, 
            InImmix = 1, 
            Pinned = 0, 
            Frozen = 0, 
            Tainted = 0, 
            Untrusted = 0, 
            LockContended = 0, 
            unused = 0, 
            aux_word = 0
          }, 
          flags64 = 1574992, 
          all_flags = 0x180850
        }, 
        klass_ = 0x100f2d480, 
        ivars_ = 0x1a, 
        __body__ = 0x102480570
      }, 
      members of rubinius::Object: 
      static type = rubinius::ObjectType
    }, 
    members of rubinius::Executable: 
    static type = rubinius::ExecutableType, 
    primitive_ = 0x1a, 
    serial_ = 0x3, 
    execute = 0x100123150 <rubinius::Object* rubinius::VMMethod::execute_specialized<rubinius::OneArgument>(rubinius::VM*, rubinius::CallFrame*, rubinius::Executable*, rubinius::Module*, rubinius::Arguments&)>, 
                                                                 ^^^^^^^^^^^^^^^^^^^
    
    
    
    prim_index_ = -1, 
    inliners_ = 0x0
  }, 
  members of rubinius::CompiledMethod: 
  static type = rubinius::CompiledMethodType, 
  metadata_ = 0x1a, 
  name_ = 0xb2ae, 
  iseq_ = 0x102480620, 
  stack_size_ = 0x7, 
  local_count_ = 0x3, 
  required_args_ = 0x3, 
  post_args_ = 0x1, 
  total_args_ = 0x3, 
  splat_ = 0x1a, 
  lines_ = 0x102480640, 
  local_names_ = 0x102480688, 
  file_ = 0xb2b6, 
  scope_ = 0x1024806b0, 
  breakpoints_ = 0x1a, 
  backend_method_ = 0x102c5dc60, 
  jit_data_ = 0x0, 
  literals_ = 0x1024806e0
}
(gdb) p $2->back             
backend_method_        backtrace              backtrace_symbols      backtrace_symbols_fd   backward_search_range  
(gdb) p $2->backend_method_ 
$3 = (class rubinius::VMMethod *) 0x102c5dc60
(gdb) p *$3
$4 = {
  <rubinius::CodeResource> = {
    _vptr$CodeResource = 0x100b1d090, 
    mark_ = false, 
    detached_ = false
  }, 
  members of rubinius::VMMethod: 
  static instructions = 0x100b00920, 
  parent_ = 0x0, 
  run = 0x100032380 <rubinius::VMMethod::interpreter(rubinius::VM*, rubinius::VMMethod*, rubinius::InterpreterCallFrame*)>, 
      ^^^^^^^^^^^^^^^^^
  
  
  opcodes = 0x102c5dd20, 
  addresses = 0x102c45b20, 
  total = 11, 
  type = 0x0, 
  total_args = 1, 
  required_args = 1, 
  post_args = 0, 
  splat_position = -1, 
  stack_size = 3, 
  number_of_locals = 1, 
  call_count = 1, 
  uncommon_count = 0, 
  number_of_caches_ = 2, 
  caches = 0x102c45b80, 
  llvm_function_ = 0x0, 
  jitted_bytes_ = 46305892, 
  jitted_impl_ = 0x0, 
  name_ = 0xb2ae, 
  method_id_ = 2695, 
  debugging = 0, 
  flags = 0
}
(gdb) 

literal tuple to_s replaced with inline cache pointer,
call backend method, public empty cache => fill_public => method lookup

InlineCache placed in literals tuple at sent side
points to backend (compiled method or other executable, like attr_accessor)
send site: receiver ("type", changes on method defs etc), module, method (inline cache)
caches found method, guards against changes

CompiledMethod < Executable
CompiledMethod has many VMMethod
#execute is a method to execute directly
#execute is changed

VMMethod < CodeResources
specialized code

vm/builtin/executable

VMMethod::execute_specialized
calls run (line 623)
run will be replaced by jited method
guard allows better machine code
